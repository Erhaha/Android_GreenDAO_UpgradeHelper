package com.lee.greendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lee.greendao.db.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_db".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "user_db";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "user_id");
        public final static Property Name = new Property(1, String.class, "name", false, "user_name");
        public final static Property Identity = new Property(2, String.class, "identity", false, "IDENTITY");
        public final static Property Age = new Property(3, String.class, "age", false, "AGE");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_db\" (" + //
                "\"user_id\" TEXT NOT NULL ," + // 0: userId
                "\"user_name\" TEXT," + // 1: name
                "\"IDENTITY\" TEXT NOT NULL UNIQUE ," + // 2: identity
                "\"AGE\" TEXT NOT NULL ," + // 3: age
                "\"DATE\" TEXT NOT NULL ," + // 4: date
                "\"LOCATION\" TEXT," + // 5: location
                "\"SEX\" TEXT);"); // 6: sex
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_user_db_user_id ON user_db" +
                " (\"user_id\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_user_db_AGE_DATE_DESC ON user_db" +
                " (\"AGE\" ASC,\"DATE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_db\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getIdentity());
        stmt.bindString(4, entity.getAge());
        stmt.bindString(5, entity.getDate());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getIdentity());
        stmt.bindString(4, entity.getAge());
        stmt.bindString(5, entity.getDate());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // identity
            cursor.getString(offset + 3), // age
            cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdentity(cursor.getString(offset + 2));
        entity.setAge(cursor.getString(offset + 3));
        entity.setDate(cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
